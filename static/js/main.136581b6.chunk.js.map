{"version":3,"sources":["components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoList","addTodo","event","preventDefault","data","target","newTodo","taskTitle","value","date","state","todoList","push","setState","deleteTodo","splice","console","log","this","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","name","Button","className","ListGroup","map","task","index","Item","variant","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA4EeA,E,kDAxEX,aAAe,IAAD,8BACV,gBAMJC,QAAU,SAACC,GACPA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,OACnBC,EAAU,CACNC,UAAWH,EAAKG,UAAUC,MAC1BC,KAAML,EAAKK,KAAKD,OAKpB,EAAKE,MAAMC,SAASC,KAAKN,GAEzB,EAAKO,SAAS,CACVF,SAAU,EAAKD,MAAMC,YArBf,EAyBdG,WAAa,SAACZ,GAEV,EAAKQ,MAAMC,SAASI,OAAOb,EAAMG,OAAOG,MAAO,GAC/C,EAAKK,SAAS,CACVF,SAAU,EAAKD,MAAMC,YA3BzB,EAAKD,MAAQ,CACTC,SAAU,IAHJ,E,0CAgCd,WAAU,IAAD,OAEL,OADAK,QAAQC,IAAIC,KAAKR,MAAMC,UAEnB,qCACA,eAACQ,EAAA,EAAD,CAAMC,SAAUF,KAAKjB,QAArB,UACI,eAACkB,EAAA,EAAKE,MAAN,CAAYC,UAAU,qBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,sCACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,eAAeC,KAAK,iBAE9D,eAACR,EAAA,EAAKE,MAAN,CAAYC,UAAU,gBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,8BACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,aAAaC,KAAK,YAC/C,uBAEb,cAACC,EAAA,EAAD,CAAQH,KAAK,SAASI,UAAU,kBAAhC,sBAES,uBAAK,0BAGlB,cAACC,EAAA,EAAD,UAEQZ,KAAKR,MAAMC,SAASoB,KAAI,SAACC,EAAMC,GAC3B,OACI,eAACH,EAAA,EAAUI,KAAX,CAA4BC,QAAQ,UAApC,UACE,wDADF,IACiC,uBADjC,IACwCH,EAAKzB,UAD7C,IACwD,uBAAK,uBAE3D,gDAHF,IAG0ByB,EAAKvB,KAH/B,IAGqC,uBAAK,uBACrC,cAACmB,EAAA,EAAD,CAAQH,KAAK,SAASU,QAAQ,SAASC,QAAS,EAAKtB,WAAYN,MAAOyB,EAAxE,sBAJgBA,e,GAxD1BI,a,MCaRC,MAXf,WACE,OACE,qBAAKT,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,sDACA,cAAC,EAAD,UCEOU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.136581b6.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport { Form, Button, ListGroup } from \"react-bootstrap\";\r\n\r\nclass TodoList extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todoList: [] // default empty array\r\n        }\r\n    }\r\n    // addTodo: add a new task inside the state\r\n    addTodo = (event)=> {\r\n        event.preventDefault(); // stop default behaviour\r\n        //console.log(event.target.taskTitle.value);\r\n        const data = event.target,\r\n        newTodo = {\r\n            taskTitle: data.taskTitle.value,\r\n            date: data.date.value,\r\n        \r\n        }\r\n        //console.log(newTodo);\r\n        // updating the array but not re-rendering\r\n        this.state.todoList.push(newTodo);\r\n        // updating state and re-render\r\n        this.setState({\r\n            todoList: this.state.todoList\r\n        })\r\n    }\r\n    // delete todo from the array\r\n    deleteTodo = (event)=> {\r\n        // splice(indexNumber, howmanyTodelete)\r\n        this.state.todoList.splice(event.target.value, 1)\r\n        this.setState({\r\n            todoList: this.state.todoList\r\n        })\r\n    }\r\n    render() {\r\n        console.log(this.state.todoList)\r\n        return(\r\n            <>\r\n            <Form onSubmit={this.addTodo}>\r\n                <Form.Group controlId=\"formBasicTaskTitle\">\r\n                    <Form.Label>What I want to achieve:</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter A Task\" name=\"taskTitle\"/>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicDate\">\r\n                    <Form.Label>My target date:</Form.Label>\r\n                    <Form.Control type=\"date\" placeholder=\"mm/dd/yyyy\" name=\"date\"/>\r\n                </Form.Group><br/>\r\n              \r\n                <Button type=\"submit\" className=\"btn btn-success\">\r\n                   Add todo\r\n                </Button><br/><br/>\r\n            </Form>\r\n\r\n            <ListGroup>\r\n                {\r\n                    this.state.todoList.map((task, index)=> {\r\n                        return(\r\n                            <ListGroup.Item key={index} variant=\"success\">\r\n                              <i>What I want to achieve:</i> <br/> {task.taskTitle} <br/><hr/>\r\n                \r\n                              <i>My target date:</i> {task.date} <br/><hr/>\r\n                                 <Button type=\"button\" variant=\"danger\" onClick={this.deleteTodo} value={index}>\r\n                                     Delete\r\n                                 </Button>\r\n                            </ListGroup.Item>\r\n                        )\r\n                    })\r\n                }\r\n            </ListGroup>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import './App.css';\nimport TodoList from './components/TodoList';\n// bootstrap css\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Lyn's Coding Journal</h1>\n        <TodoList/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}